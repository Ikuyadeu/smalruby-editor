# 「イベント」ジャンル

<%
  category = 'events'
  color = 33
%>

# はじまったとき
<% n = "#{category}_on_start" %>
Blockly.Blocks['<%= n %>'] =
  init: ()->
    @setHelpUrl('')
    @setColour(<%= color %>)
    @appendDummyInput()
      .appendField('はじまったとき')
    @appendStatementInput('DO')
    @setPreviousStatement(true)
    @setNextStatement(true)
    @setTooltip('')

Blockly.Ruby['<%= n %>'] = (block) ->
  if (c = Blockly.Ruby.character())
    Blockly.Ruby.receiverStack().push(c)
    try
      branch = Blockly.Ruby.statementToCode(block, 'DO') || '\n'
    finally
      Blockly.Ruby.receiverStack().pop()
    """


    #{Blockly.Ruby.receiverName()}on(:start) do
    #{branch}end

    """
  else
    ''

# キーボードの[▼キー]が[▼押された/押され続けている]とき
<% n = "#{category}_on_key_push_or_down" %>
Blockly.Blocks['<%= n %>'] =
  init: ()->
    keyDropdown = window.SmalrubyEditor.Sensing.KeyDropdown
    podDropdown = window.SmalrubyEditor.Sensing.PushOrDownDropdown

    @setHelpUrl('')
    @setColour(<%= color %>)
    @appendDummyInput()
      .appendField('キーボードの')
      .appendField(new Blockly.FieldDropdown(keyDropdown), 'KEY')
      .appendField('が')
      .appendField(new Blockly.FieldDropdown(podDropdown), 'POD')
      .appendField('とき')
    @appendStatementInput('DO')
    @setPreviousStatement(true)
    @setNextStatement(true)
    @setTooltip('')

Blockly.Ruby['<%= n %>'] = (block) ->
  if (var0 = Blockly.Ruby.receiverName())
    key = @getFieldValue('KEY')
    pod = @getFieldValue('POD')
    branch = Blockly.Ruby.statementToCode(block, 'DO') || '\n'
    """


    #{var0}.on(:key_#{pod}, #{key}) do
    #{branch}end

    """
  else
    ''

# キャラクターがクリックされたとき
<% n = "#{category}_on_click" %>
Blockly.Blocks['<%= n %>'] =
  init: ()->
    @setHelpUrl('')
    @setColour(<%= color %>)
    @appendDummyInput()
      .appendField('キャラクターがクリックされたとき')
    @appendStatementInput('DO')
    @setPreviousStatement(true)
    @setNextStatement(true)
    @setTooltip('')

Blockly.Ruby['<%= n %>'] = (block) ->
  if (c = Blockly.Ruby.character())
    Blockly.Ruby.receiverStack().push(c)
    try
      branch = Blockly.Ruby.statementToCode(block, 'DO') || '\n'
    finally
      Blockly.Ruby.receiverStack().pop()
    """


    #{Blockly.Ruby.receiverName()}on(:click) do |x, y|
    #{branch}end

    """
  else
    ''

# キャラクターが[▼キャラクター]にぶつかったとき
<% n = "#{category}_on_hit" %>
Blockly.Blocks['<%= n %>'] =
  init: ()->
    @setHelpUrl('')
    @setColour(<%= color %>)
    @appendDummyInput()
      .appendField(new Blockly.FieldVariable('char2'), 'VAR1')
      .appendField('にぶつかったとき')
    @appendStatementInput('DO')
    @setPreviousStatement(true)
    @setNextStatement(true)
    @setTooltip('')

Blockly.Ruby['<%= n %>'] = (block) ->
  if (var0 = Blockly.Ruby.receiverName())
    var1 = Blockly.Ruby.variableDB_
      .getName(block.getFieldValue('VAR1'), Blockly.Variables.NAME_TYPE)
    branch = Blockly.Ruby.statementToCode(block, 'DO') || '\n'
    """


    #{var0}.on(:hit, #{var1}) do
    #{branch}end

    """
  else
    ''
