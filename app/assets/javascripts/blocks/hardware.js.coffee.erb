# 「ハードウェア」ジャンル

<%
  prefix = 'hardware'
  color = 208
%>

# ハードウェアの環境設定
window.SmalrubyEditor.Hardware =
  Type: 'Arduino' # 種別
  DioPins: [0..13] # デジタルIOピン

# ハードウェアを準備する
<% n = "#{prefix}_init_arduino" %>
Blockly.Blocks['<%= n %>'] =
  init: ()->
    @.setHelpUrl('')
    @.setColour(<%= color %>)
    @.appendDummyInput().appendField('ハードウェアを準備する')
    @.setTooltip('')

Blockly.Ruby['<%= n %>'] = (block) ->
  Blockly.Ruby.definitions_['init_arduino'] = 'init_arduino\n'
  ''

dioPinDropdown =
  ([String(n), String(n)] for n in window.SmalrubyEditor.Hardware.DioPins)

# LED[▼]をオンにする
# LED[▼]をオフにする
<%
  [
    ['on', 'オン'],
    ['off', 'オフ'],
  ].each do |method, label|
    n = "#{prefix}_led_#{method}"
%>

Blockly.Blocks['<%= n %>'] =
  init: ()->
    @.setHelpUrl('')
    @.setColour(<%= color %>)
    @.appendDummyInput()
      .appendField('LED')
      .appendField(new Blockly.FieldDropdown(dioPinDropdown), 'PIN')
      .appendField('を<%= label %>にする')
    @.setPreviousStatement(true)
    @.setNextStatement(true)
    @.setTooltip('')

Blockly.Ruby['<%= n %>'] = (block) ->
  pin = parseInt(@.getTitleValue('PIN'))
  "led(#{pin}).<%= method %>"
<% end %>

# 条件:ボタン[▼]を押している
# 条件:ボタン[▼]を離している
<%
  [
    ['down', '押している'],
    ['up', '離している'],
  ].each do |method, label|
    n = "#{prefix}_button_#{method}"
%>

Blockly.Blocks['<%= n %>'] =
  init: ()->
    @.setHelpUrl('')
    @.setColour(<%= color %>)
    @.appendDummyInput()
      .appendField('ボタン')
      .appendField(new Blockly.FieldDropdown(dioPinDropdown), 'PIN')
      .appendField('を<%= label %>')
    @.setOutput(true, 'Boolean')
    @.setTooltip('')

Blockly.Ruby['<%= n %>'] = (block) ->
  pin = parseInt(@.getTitleValue('PIN'))
  ["button(#{pin}).<%= method %>?", Blockly.Ruby.ORDER_ATOMIC]
<% end %>

# ボタン[▼]を押したとき
# ボタン[▼]を離したとき
<%
  [
    ['down', '押した'],
    ['up', '離した'],
  ].each do |name, label|
    n = "#{prefix}_on_button_#{name}"
%>

Blockly.Blocks['<%= n %>'] =
  init: ()->
    @.setHelpUrl('')
    @.setColour(<%= color %>)
    @.appendDummyInput()
      .appendField(new Blockly.FieldVariable('char1'), 'VAR')
      .appendField('ボタン')
      .appendField(new Blockly.FieldDropdown(dioPinDropdown), 'PIN')
      .appendField('を<%= label %>とき')
    @.appendStatementInput('DO')
    @.setPreviousStatement(true)
    @.setNextStatement(true)
    @.setTooltip('')

  getVars: Blockly.Blocks['events_on_start'].getVars
  getVar: Blockly.Blocks['events_on_start'].getVar
  renameVar: Blockly.Blocks['events_on_start'].renameVar
  customContextMenu: Blockly.Blocks['events_on_start'].customContextMenu

Blockly.Ruby['<%= n %>'] = (block) ->
  var0 = Blockly.Ruby.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE)
  pin = parseInt(@.getTitleValue('PIN'))
  branch = Blockly.Ruby.statementToCode(block, 'DO') || '\n'
  "#{var0}.on(:button_<%= name %>, #{pin}) do\n" + branch + 'end\n'
<% end %>
